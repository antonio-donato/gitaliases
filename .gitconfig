[user]
	email = antonio.donato@cgm.com
	name = Antonio Donato
[credential]
    helper = manager
[core]
	editor = \"C:/Program Files/Notepad++/notepad++.exe\" -multiInst -nosession
[diff]
	tool = bc3
[difftool]
	prompt = false
[difftool "bc3"]
	path = c:/Program Files (x86)/Beyond Compare 3/bcomp.exe
	prompt = false
[mergetool "vscode"]
    cmd = code --wait $MERGED	
[rerere]
    enabled = true	
[alias]
	amend = commit --amend
	fixup = commit --amend --no-edit
	st = status -sb
	co = checkout
	cob = checkout -b
	cp = cherry-pick

	# show last commit
	last = log -1 HEAD

	# unstage staged files (or pass a filename)
	unstage = reset HEAD --

	# undo last commit(s) and keep changes, with files unstaged
	r1 = reset HEAD^
	r2 = reset HEAD^^

    # discard all changes since last commit (use with caution)
    rh = reset HEAD --hard

	# undo last commit(s) and discard changes (use with caution)
	rh1 = reset HEAD^ --hard
	rh2 = reset HEAD^^ --hard

	# fast grep on current folder and subfolders
	g = grep --break --heading --line-number

    # edit global git config
	ec = config --global -e

    # add all changes including untracked files and then create a commit
    # with message...
    cm = !git add -A && git commit -m

    # add all changes including untracked files and then commit with
    # 'SAVEPOINT' message.
    save = !git add -A && git commit -m 'SAVEPOINT'

    # this is functionally identical to 'r1' but it makes more sense
    # semantically, as it is going to be used after a 'save' or 'wip'
    undo = reset HEAD^ --mixed

    # add all tracked changes (do not untracked files) and then commit with
    # 'WIP' message.
    wip = !git add -u && git commit -m 'WIP'

    # add changes in working dir to a WIPE SAVEPOINT commit, then wipe that
    # commit so: A) working dir is clean and B) I can still go back to
    # that work I wiped if needs arises (via reflog).
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

    # show a tree with all branches
    tree = log --graph --decorate --oneline
	
    # show a tree with current branch (with user)
    lg = log --decorate --oneline --pretty=format:'%C(Yellow)%h %Cgreen%aN %Creset%s %C(auto)%d'

	# show all branch situation
	bav = branch -a -vv
	
	# git status
	statsu = status

	# git co Wingesfar_beta
	wb = !git checkout Wingesfar_beta
	#s1 = !git checkout sup_201710a
	s1 = !git checkout sup_201801a

	# git alias
	alias = !git config --list | grep alias
	
	# Fetcha e pruna con tags
    f = !git fetch --prune --tags 		
	
	# Delete local branch
    bdel = !git branch -D
    brdel = !git push -d origin 

	# git Ramo da cui staccato temporaneo
	parents = "!f(){ \
        git fetch \
        && branch=$(git rev-parse --abbrev-ref HEAD) && git branch -r\
        | grep -v "\\*" \
        | grep -E ".*sup_\\|[Ww]ingesfar" \
        | while read name; \
            do git merge-base $name $branch \
            | xargs git rev-list \
            | wc -l | xargs echo -n && echo \"\" $name \
            ;\
        done \
        | sort -n \
        | tail -n3 \
        ;}; f"
	
	# Fetch, change branch on Wingesfar_beta and pull, then first support and pull, then second support and finally come back on the original branch
        #&& git f && git wb && git pull && git s1 && git pull && git s2 && git pull \
 	pall = "!f(){ \
	    branch=$(git rev-parse --abbrev-ref HEAD) \
		&& RED=$'\\033[0;31m' \
		&& NORMAL=$'\\033[0;39m' \
		&& GREEN=$'\\033[32m' \
 		&& echo Sei posizionato su $RED \\'$branch\\' $NORMAL\
        && git f \
		&& git wb \
 		&& echo $GREEN ---------------------------------- $NORMAL\
		&& git pull && git s1 \
 		&& echo $GREEN ---------------------------------- $NORMAL\
		&& git pull \
 		&& git checkout $branch \
 		&& echo $GREEN ---------------------------------- \
 		&& echo PULL-ALL terminato. $NORMAL Sei tornato su $RED \\'$branch\\' $NORMAL\
        ;}; f"		
		
		wgtree = !git f && git log --graph --pretty=format:'%C(Yellow)%h %Cgreen%aN %Creset%s %C(auto)%d'  origin\\/Wingesfar_beta		
	
	# Diff view only name of file changed between this and another branch/hash/tag
	dino = diff --name-only